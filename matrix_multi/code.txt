void matrixMultiplyWithSSE(float* a, float * b, float* result, int N){
    __m128 pB, pA,pResult;
    int step = 4;
#pragma omp parallel for num_threads(4) schedule(static) private(pB,pA,pResult)
    for(int i = 0; i < N; i += step){
        for(int j = 0;j < N; j += step){
            for(int k = 0; k < N; k += step){
                //Above: Partitioning
                //Below: Small matrix multiply
                for(int x = i; x < i + step; x++){
                    pB = _mm_loadu_ps(&b[j * N + k]);
                    pA = _mm_set1_ps(a[x * N + j]);
                    pResult = _mm_mul_ps(pB,pA);
                    pB = _mm_loadu_ps(&b[(j+1) * N + k]);
                    pA = _mm_set1_ps(a[x * N + j+1]);
                    pResult = _mm_add_ps(_mm_mul_ps(pB,pA),pResult);
                    pB = _mm_loadu_ps(&b[(j+2) * N + k]);
                    pA = _mm_set1_ps(a[x * N + j+2]);
                    pResult = _mm_add_ps(_mm_mul_ps(pB,pA),pResult);
                    pB = _mm_loadu_ps(&b[(j+3) * N + k]);
                    pA = _mm_set1_ps(a[x * N + j+3]);
                    pResult = _mm_add_ps(_mm_mul_ps(pB,pA),pResult);
                    _mm_storeu_ps(&result[x * N + k], _mm_add_ps(pResult, _mm_loadu_ps(&result[x * N + k])));
                }
            }
        }
    }
}
